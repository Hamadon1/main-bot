from flask import Flask, request
import telebot
import json
import random
import os
from datetime import datetime

TOKEN = '7613948633:AAG-79EzTxKU_9-ZQrWcs78dUJU6xxy6KKY'
ADMIN_ID = 6862331593  # Telegram ID-–∏ –∞–¥–º–∏–Ω

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –ë–∞–∑–∞–∏ –º–∞—ä–ª—É–º–æ—Ç
try:
    with open("data.json", "r", encoding="utf-8") as f:
        db = json.load(f)
except:
    db = {
        "movies": {}, 
        "channels": [],
        "users": {},
        "stats": {"total_views": 0, "total_users": 0}
    }

def save_db():
    # –ù—É—Å—Ö–∞–∏ —ç“≥—Ç–∏—ë—Ç”£ (backup)
    if os.path.exists("data.json"):
        os.rename("data.json", f"data_backup_{datetime.now().strftime('%Y%m%d%H%M%S')}.json")
    
    with open("data.json", "w", encoding="utf-8") as f:
        json.dump(db, f, ensure_ascii=False, indent=2)

def is_subscribed(user_id):
    if not db["channels"]:  # –ê–≥–∞—Ä –∫–∞–Ω–∞–ª –Ω–∞–±–æ—à–∞–¥
        return True
        
    for channel in db["channels"]:
        try:
            status = bot.get_chat_member(channel, user_id).status
            if status in ['member', 'administrator', 'creator']:
                continue
            else:
                return False
        except Exception as e:
            print(f"Error checking subscription: {e}")
            return False
    return True

def register_user(user):
    user_id = str(user.id)
    if user_id not in db["users"]:
        db["users"][user_id] = {
            "first_name": user.first_name,
            "last_name": user.last_name if user.last_name else "",
            "username": user.username if user.username else "",
            "joined_date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "movies_watched": 0,
            "last_activity": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        db["stats"]["total_users"] += 1
        save_db()
    else:
        # –¢–∞–Ω“≥–æ –Ω–∞–≤—Å–æ–∑–∏–∏ —Ñ–∞—ä–æ–ª–∏—è—Ç–∏ –æ—Ö–∏—Ä–∏–Ω
        db["users"][user_id]["last_activity"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        save_db()

user_states = {}
movie_info_temp = {}

# –†–æ—É—Ç –±–∞—Ä–æ–∏ webhook
@app.route(f'/{TOKEN}', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return 'ok', 200

@app.route('/')
def index():
    return "Bot is running!", 200

# “≤–∞—Ä–∞–∫–∞—Ç“≥–æ–∏ –∞—Å–æ—Å”£
@bot.message_handler(commands=["start"])
def start(msg):
    register_user(msg.from_user)
    
    # –°–∞–Ω“∑–µ–¥, –∫–∏ –æ—ë —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–æ—Ä–∞–¥
    if len(msg.text.split()) > 1:
        # –ì–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ movie_id –∞–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä
        deep_link_param = msg.text.split()[1]
        movie_id = deep_link_param
        
        if movie_id in db["movies"]:
            if is_subscribed(msg.chat.id):
                # –§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ —Ñ–∏–ª–º
                send_movie_to_user(msg.chat.id, movie_id)
            else:
                # –¢–∞–ª–∞–±–∏ –æ–±—É–Ω–∞
                markup = telebot.types.InlineKeyboardMarkup()
                for ch in db["channels"]:
                    ch_name = ch.replace('@', '')
                    try:
                        chat_info = bot.get_chat(ch)
                        title = chat_info.title
                        markup.add(telebot.types.InlineKeyboardButton(f"üì¢ {title}", url=f"https://t.me/{ch_name}"))
                    except:
                        markup.add(telebot.types.InlineKeyboardButton(f"üì¢ {ch}", url=f"https://t.me/{ch_name}"))
                
                # –ò–ª–æ–≤–∞–∏ —Ç—É–≥–º–∞–∏ —Å–∞–Ω“∑–∏—à –±–æ movie_id
                markup.add(telebot.types.InlineKeyboardButton("‚úÖ –¢–∞—Ñ—Ç–∏—à–∏ –æ–±—É–Ω–∞", callback_data=f"check_sub_{movie_id}"))
                
                bot.send_message(
                    msg.chat.id, 
                    "‚ö†Ô∏è –ë–∞—Ä–æ–∏ –¥–∏–¥–∞–Ω–∏ —Ñ–∏–ª–º –∞–≤–≤–∞–ª –±–∞ –∫–∞–Ω–∞–ª“≥–æ–∏ –º–æ –æ–±—É–Ω–∞ —à–∞–≤–µ–¥:",
                    reply_markup=markup
                )
            return
    
    # –ò–¥–æ–º–∞–∏ —Ñ—É–Ω–∫—Å–∏—è–∏ –æ–¥–¥–∏–∏ —Å—Ç–∞—Ä—Ç
    if is_subscribed(msg.chat.id):
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üé¨ –§–∏–ª–º“≥–æ–∏ –Ω–∞–≤", "üîé “∂—É—Å—Ç—É“∑”Ø–∏ —Ñ–∏–ª–º")
        markup.add("üìä –û–º–æ—Ä–∏ –º–∞–Ω", "‚ÑπÔ∏è –î–∞—Å—Ç—É—Ä–∞–º–∞–ª")
        
        bot.send_message(
            msg.chat.id, 
            f"–°–∞–ª–æ–º, {msg.from_user.first_name}! –•—É—à –æ–º–∞–¥–µ–¥ –±–∞ –ë–æ—Ç-–∏ —Ñ–∏–ª–º“≥–æ.\n\n"
            "–ë–∞—Ä–æ–∏ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ —Ñ–∏–ª–º “õ—É–ª—Ñ-ID —Ñ–∏—Ä–∏—Å—Ç–µ–¥ —ë –∞–∑ —Ç—É–≥–º–∞“≥–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥.",
            reply_markup=markup
        )
    else:
        markup = telebot.types.InlineKeyboardMarkup()
        for ch in db["channels"]:
            ch_name = ch.replace('@', '')
            try:
                chat_info = bot.get_chat(ch)
                title = chat_info.title
                markup.add(telebot.types.InlineKeyboardButton(f"üì¢ {title}", url=f"https://t.me/{ch_name}"))
            except:
                markup.add(telebot.types.InlineKeyboardButton(f"üì¢ {ch}", url=f"https://t.me/{ch_name}"))
                
        markup.add(telebot.types.InlineKeyboardButton("‚úÖ –¢–∞—Ñ—Ç–∏—à–∏ –æ–±—É–Ω–∞", callback_data="check_sub"))
        
        bot.send_message(
            msg.chat.id, 
            "‚ö†Ô∏è –ë–∞—Ä–æ–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –±–æ—Ç –∞–≤–≤–∞–ª –±–∞ –∫–∞–Ω–∞–ª“≥–æ–∏ –º–æ –æ–±—É–Ω–∞ —à–∞–≤–µ–¥:",
            reply_markup=markup
        )

# –§—É–Ω–∫—Å–∏—è –±–∞—Ä–æ–∏ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ —Ñ–∏–ª–º –±–∞ –∫–æ—Ä–±–∞—Ä
def send_movie_to_user(chat_id, movie_id):
    movie_data = db["movies"][movie_id]
    
    # –ó–∏—ë–¥ –∫–∞—Ä–¥–∞–Ω–∏ —à—É–º–æ—Ä–∞–∏ —Ç–∞–º–æ—à–æ
    db["movies"][movie_id]["views"] = movie_data.get("views", 0) + 1
    db["stats"]["total_views"] += 1
    
    # –ù–∞–≤—Å–æ–∑–∏–∏ –æ–º–æ—Ä–∏ –∫–æ—Ä–±–∞—Ä
    user_id = str(chat_id)
    if user_id in db["users"]:
        db["users"][user_id]["movies_watched"] = db["users"][user_id].get("movies_watched", 0) + 1
    
    save_db()
    
    # –¢–∞–π—ë—Ä –∫–∞—Ä–¥–∞–Ω–∏ –º–∞—ä–ª—É–º–æ—Ç –±–∞—Ä–æ–∏ –Ω–∏—à–æ–Ω –¥–æ–¥–∞–Ω
    title = movie_data.get("title", "–ë–µ –Ω–æ–º")
    info = movie_data.get("info", "–ú–∞—ä–ª—É–º–æ—Ç –º–∞–≤“∑—É–¥ –Ω–µ—Å—Ç")
    file_id = movie_data.get("file_id")
    views = movie_data.get("views", 0)
    
    # “≤–∏—Å–æ–± –∫–∞—Ä–¥–∞–Ω–∏ –¥–∞–≤–æ–º–Ω–æ–∫”£
    duration = movie_data.get("duration", 0)
    duration_min = int(duration / 60)
    duration_sec = duration % 60
    
    # –ù–∏—à–æ–Ω –¥–æ–¥–∞–Ω–∏ —Ñ–∏–ª–º
    caption = f"üé¨ *{title}*\n\n"
    caption += f"‚è± *–î–∞–≤–æ–º–Ω–æ–∫”£:* {duration_min}:{duration_sec:02d}\n"
    caption += f"üëÅ *–¢–∞–º–æ—à–æ“≥–æ:* {views}\n\n"
    caption += f"üìù *–ú–∞—ä–ª—É–º–æ—Ç:*\n{info}"
    
    try:
        bot.send_video(
            chat_id,
            file_id,
            caption=caption,
            parse_mode="Markdown"
        )
    except Exception as e:
        bot.send_message(
            chat_id,
            f"‚ùå –•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –≤–∏–¥–µ–æ: {e}"
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith("check_sub_"))
def check_sub_with_movie(call):
    movie_id = call.data.split("_")[2]
    
    if is_subscribed(call.message.chat.id):
        # –§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ —Ñ–∏–ª–º
        if movie_id in db["movies"]:
            bot.edit_message_text(
                "‚úÖ –û—Ñ–∞—Ä–∏–Ω! –®—É–º–æ –±–∞ “≥–∞–º–∞–∏ –∫–∞–Ω–∞–ª“≥–æ –æ–±—É–Ω–∞ —à—É–¥–µ–¥.",
                call.message.chat.id,
                call.message.message_id
            )
            send_movie_to_user(call.message.chat.id, movie_id)
        else:
            bot.edit_message_text(
                "‚ùå –ë–∞—Ö—à–∏—à, —Ñ–∏–ª–º —ë—Ñ—Ç –Ω–∞—à—É–¥.",
                call.message.chat.id,
                call.message.message_id
            )
    else:
        bot.answer_callback_query(
            call.id,
            "‚ùå –®—É–º–æ “≥–∞–Ω”Ø–∑ –æ–±—É–Ω–∞ –Ω–∞—à—É–¥–∞–µ–¥. –õ—É—Ç—Ñ–∞–Ω, –±–∞ “≥–∞–º–∞–∏ –∫–∞–Ω–∞–ª“≥–æ –æ–±—É–Ω–∞ —à–∞–≤–µ–¥!",
            show_alert=True
        )

@bot.callback_query_handler(func=lambda call: call.data == "check_sub")
def check_sub(call):
    if is_subscribed(call.message.chat.id):
        # –¢—É–≥–º–∞“≥–æ –±–∞—Ä–æ–∏ –∫–æ—Ä–±–∞—Ä
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üé¨ –§–∏–ª–º“≥–æ–∏ –Ω–∞–≤", "üîé “∂—É—Å—Ç—É“∑”Ø–∏ —Ñ–∏–ª–º")
        markup.add("üìä –û–º–æ—Ä–∏ –º–∞–Ω", "‚ÑπÔ∏è –î–∞—Å—Ç—É—Ä–∞–º–∞–ª")
        
        bot.edit_message_text(
            "‚úÖ –û—Ñ–∞—Ä–∏–Ω! –®—É–º–æ –±–∞ “≥–∞–º–∞–∏ –∫–∞–Ω–∞–ª“≥–æ –æ–±—É–Ω–∞ —à—É–¥–µ–¥.\n\n"
            "–ê–∫–Ω—É–Ω –º–µ—Ç–∞–≤–æ–Ω–µ–¥ –∞–∑ –±–æ—Ç –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥.",
            call.message.chat.id,
            call.message.message_id
        )
        
        bot.send_message(
            call.message.chat.id,
            "–ë–∞—Ä–æ–∏ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ —Ñ–∏–ª–º “õ—É–ª—Ñ-ID —Ñ–∏—Ä–∏—Å—Ç–µ–¥ —ë –∞–∑ —Ç—É–≥–º–∞“≥–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥.",
            reply_markup=markup
        )
    else:
        bot.answer_callback_query(
            call.id,
            "‚ùå –®—É–º–æ “≥–∞–Ω”Ø–∑ –æ–±—É–Ω–∞ –Ω–∞—à—É–¥–∞–µ–¥. –õ—É—Ç—Ñ–∞–Ω, –±–∞ “≥–∞–º–∞–∏ –∫–∞–Ω–∞–ª“≥–æ –æ–±—É–Ω–∞ —à–∞–≤–µ–¥!",
            show_alert=True
        )

# –ü–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
@bot.message_handler(commands=["panel", "admin"])
def panel(msg):
    if msg.from_user.id == ADMIN_ID:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("‚ûï –ò–ª–æ–≤–∞–∏ –§–∏–ª–º", "‚ûï –ò–ª–æ–≤–∞–∏ –ö–∞–Ω–∞–ª")
        markup.add("‚ùå –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –§–∏–ª–º", "‚ùå –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –ö–∞–Ω–∞–ª")
        markup.add("üìä –û–º–æ—Ä", "üìã –†”Ø–π—Ö–∞—Ç–∏ —Ñ–∏–ª–º“≥–æ")
        markup.add("üîÑ –ë–æ—Ç-—Ä–æ –∞–∑ –Ω–∞–≤ —Å–∞—Ä –∫–∞—Ä–¥–∞–Ω")
        
        bot.send_message(
            msg.chat.id, 
            "üîê –ü–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:\n\n"
            "–ê–º–∞–ª–µ—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:",
            reply_markup=markup
        )
    else:
        bot.send_message(msg.chat.id, "‚õî –®—É–º–æ –¥–∞—Å—Ç—Ä–∞—Å”£ –Ω–∞–¥–æ—Ä–µ–¥!")

# –ò–ª–æ–≤–∞–∏ —Ñ–∏–ª–º
@bot.message_handler(func=lambda msg: msg.text == "‚ûï –ò–ª–æ–≤–∞–∏ –§–∏–ª–º" and msg.from_user.id == ADMIN_ID)
def add_movie(msg):
    user_states[msg.chat.id] = "waiting_for_movie"
    
    # –¢—É–≥–º–∞–∏ –±–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üîô –ë–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω")
    
    bot.send_message(
        msg.chat.id, 
        "üé¨ –õ—É—Ç—Ñ–∞–Ω, —Ñ–∞–π–ª–∏ –≤–∏–¥–µ–æ—Ä–æ —Ä–∞–≤–æ–Ω –∫—É–Ω–µ–¥:",
        reply_markup=markup
    )

# –ò–ª–æ–≤–∞–∏ –∫–∞–Ω–∞–ª
@bot.message_handler(func=lambda msg: msg.text == "‚ûï –ò–ª–æ–≤–∞–∏ –ö–∞–Ω–∞–ª" and msg.from_user.id == ADMIN_ID)
def add_channel(msg):
    user_states[msg.chat.id] = "waiting_for_channel"
    
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üîô –ë–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω")
    
    bot.send_message(
        msg.chat.id, 
        "üì¢ –ù–æ–º–∏ –∫–∞–Ω–∞–ª—Ä–æ —Ä–∞–≤–æ–Ω –∫—É–Ω–µ–¥ (–º–∏—Å–æ–ª: @kanal):",
        reply_markup=markup
    )

# –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∏–ª–º
@bot.message_handler(func=lambda msg: msg.text == "‚ùå –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –§–∏–ª–º" and msg.from_user.id == ADMIN_ID)
def delete_movie(msg):
    if db["movies"]:
        # –°–æ—Ö—Ç–∞–Ω–∏ —Ñ–µ“≥—Ä–∏—Å—Ç –±–æ —Ç—É–≥–º–∞“≥–æ
        markup = telebot.types.InlineKeyboardMarkup()
        
        for movie_id, movie_data in db["movies"].items():
            # –ù–æ–º–∏ —Ñ–∏–ª–º —ë ID
            movie_name = movie_data.get("title", f"–§–∏–ª–º #{movie_id}")
            markup.add(telebot.types.InlineKeyboardButton(
                f"üé¨ {movie_name} (ID: {movie_id})",
                callback_data=f"delete_movie_{movie_id}"
            ))
            
        markup.add(telebot.types.InlineKeyboardButton("üîô –ë–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω", callback_data="cancel_delete"))
        
        bot.send_message(
            msg.chat.id, 
            "‚ùå –§–∏–ª–º—Ä–æ –±–∞—Ä–æ–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:",
            reply_markup=markup
        )
    else:
        bot.send_message(msg.chat.id, "‚ùå –Ø–≥–æ–Ω —Ñ–∏–ª–º –¥–∞—Ä –ø–æ–π–≥–æ“≥–∏ –¥–æ–¥–∞“≥–æ —ë—Ñ—Ç –Ω–∞—à—É–¥.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å–º–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_movie_"))
def confirm_delete_movie(call):
    movie_id = call.data.split("_")[2]
    
    if movie_id in db["movies"]:
        movie_name = db["movies"][movie_id].get("title", f"–§–∏–ª–º #{movie_id}")
        
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(
            telebot.types.InlineKeyboardButton("‚úÖ –ë–∞–ª–µ, –Ω–µ—Å—Ç –∫—É–Ω–µ–¥", callback_data=f"confirm_delete_{movie_id}"),
            telebot.types.InlineKeyboardButton("‚ùå –ù–µ", callback_data="cancel_delete")
        )
        
        bot.edit_message_text(
            f"üóë –û—ë —à—É–º–æ –¥–∞—Ä “≥–∞“õ–∏“õ–∞—Ç –º–µ—Ö–æ“≥–µ–¥ —Ñ–∏–ª–º–∏ \"{movie_name}\" (ID: {movie_id})-—Ä–æ –Ω–µ—Å—Ç –∫—É–Ω–µ–¥?",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )
    else:
        bot.answer_callback_query(call.id, "‚ùå –§–∏–ª–º —ë—Ñ—Ç –Ω–∞—à—É–¥!", show_alert=True)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_delete_"))
def process_delete_movie(call):
    movie_id = call.data.split("_")[2]
    
    if movie_id in db["movies"]:
        movie_name = db["movies"][movie_id].get("title", f"–§–∏–ª–º #{movie_id}")
        db["movies"].pop(movie_id)
        save_db()
        
        bot.edit_message_text(
            f"‚úÖ –§–∏–ª–º–∏ \"{movie_name}\" (ID: {movie_id}) –±–æ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞ —à—É–¥!",
            call.message.chat.id,
            call.message.message_id
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        panel(call.message)
    else:
        bot.answer_callback_query(call.id, "‚ùå –§–∏–ª–º —ë—Ñ—Ç –Ω–∞—à—É–¥!", show_alert=True)
        
# –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data == "cancel_delete")
def cancel_delete(call):
    bot.edit_message_text(
        "‚ùå –ê–º–∞–ª–∏—ë—Ç –±–µ–∫–æ—Ä –∫–∞—Ä–¥–∞ —à—É–¥!",
        call.message.chat.id,
        call.message.message_id
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    panel(call.message)

# –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –∫–∞–Ω–∞–ª
@bot.message_handler(func=lambda msg: msg.text == "‚ùå –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –ö–∞–Ω–∞–ª" and msg.from_user.id == ADMIN_ID)
def delete_channel(msg):
    if db["channels"]:
        markup = telebot.types.InlineKeyboardMarkup()
        
        for i, ch in enumerate(db["channels"]):
            try:
                chat_info = bot.get_chat(ch)
                title = chat_info.title
                markup.add(telebot.types.InlineKeyboardButton(
                    f"üì¢ {title} ({ch})", 
                    callback_data=f"delete_channel_{i}"
                ))
            except:
                markup.add(telebot.types.InlineKeyboardButton(
                    f"üì¢ {ch}", 
                    callback_data=f"delete_channel_{i}"
                ))
                
        markup.add(telebot.types.InlineKeyboardButton("üîô –ë–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω", callback_data="cancel_delete"))
        
        bot.send_message(
            msg.chat.id, 
            "‚ùå –ö–∞–Ω–∞–ª—Ä–æ –±–∞—Ä–æ–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:",
            reply_markup=markup
        )
    else:
        bot.send_message(msg.chat.id, "‚ùå –Ø–≥–æ–Ω –∫–∞–Ω–∞–ª –¥–∞—Ä –ø–æ–π–≥–æ“≥–∏ –¥–æ–¥–∞“≥–æ —ë—Ñ—Ç –Ω–∞—à—É–¥.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_channel_"))
def process_delete_channel(call):
    try:
        index = int(call.data.split("_")[2])
        
        if 0 <= index < len(db["channels"]):
            ch = db["channels"].pop(index)
            save_db()
            
            bot.edit_message_text(
                f"‚úÖ –ö–∞–Ω–∞–ª–∏ {ch} –±–æ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞ —à—É–¥!",
                call.message.chat.id,
                call.message.message_id
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
            panel(call.message)
        else:
            bot.answer_callback_query(call.id, "‚ùå –†–∞“õ–∞–º –Ω–æ–¥—É—Ä—É—Å—Ç!", show_alert=True)
    except Exception as e:
        bot.answer_callback_query(call.id, f"‚ùå –•–∞—Ç–æ–≥”£: {e}", show_alert=True)

# –û–º–æ—Ä–∏ –∞–¥–º–∏–Ω
@bot.message_handler(func=lambda msg: msg.text == "üìä –û–º–æ—Ä" and msg.from_user.id == ADMIN_ID)
def admin_stats(msg):
    total_users = db["stats"]["total_users"]
    total_views = db["stats"]["total_views"]
    total_movies = len(db["movies"])
    total_channels = len(db["channels"])
    
    # –ê–∑ –ø–æ—Ä–≥–æ“≥–∏ –º–∞—ä–ª—É–º–æ—Ç –±–∞ –¥–∞—Å—Ç –æ–≤–∞—Ä–¥–∞–Ω–∏ —Ñ–µ“≥—Ä–∏—Å—Ç
    active_users = 0
    for user_id, user_data in db["users"].items():
        # “≤–∏—Å–æ–±–∏ –∫–æ—Ä–±–∞—Ä–æ–Ω–∏ —Ñ–∞—ä–æ–ª –¥–∞—Ä “≥–∞—Ñ—Ç–∞–∏ –æ—Ö–∏—Ä
        last_activity = datetime.strptime(user_data["last_activity"], "%Y-%m-%d %H:%M:%S")
        if (datetime.now() - last_activity).days < 7:
            active_users += 1
    
    bot.send_message(
        msg.chat.id,
        f"üìä *–û–º–æ—Ä–∏ –±–æ—Ç:*\n\n"
        f"üë• *–ö–æ—Ä–±–∞—Ä–æ–Ω:* {total_users}\n"
        f"üë§ *–ö–æ—Ä–±–∞—Ä–æ–Ω–∏ —Ñ–∞—ä–æ–ª (7 —Ä”Ø–∑):* {active_users}\n"
        f"üé¨ *–®—É–º–æ—Ä–∞–∏ —Ñ–∏–ª–º“≥–æ:* {total_movies}\n"
        f"üì¢ *–®—É–º–æ—Ä–∞–∏ –∫–∞–Ω–∞–ª“≥–æ:* {total_channels}\n"
        f"üëÅ *“≤–∞–º–∞–≥”£ —Ç–∞–º–æ—à–æ“≥–æ:* {total_views}",
        parse_mode="Markdown"
    )

# –†”Ø–π—Ö–∞—Ç–∏ —Ñ–∏–ª–º“≥–æ
@bot.message_handler(func=lambda msg: msg.text == "üìã –†”Ø–π—Ö–∞—Ç–∏ —Ñ–∏–ª–º“≥–æ" and msg.from_user.id == ADMIN_ID)
def movie_list(msg):
    if db["movies"]:
        message = "üìã *–†”Ø–π—Ö–∞—Ç–∏ —Ñ–∏–ª–º“≥–æ–∏ –º–∞–≤“∑—É–¥–∞:*\n\n"
        
        for movie_id, movie_data in db["movies"].items():
            title = movie_data.get("title", "–ë–µ –Ω–æ–º")
            views = movie_data.get("views", 0)
            message += f"üé¨ *{title}*\n"
            message += f"üîë ID: `{movie_id}`\n"
            message += f"üëÅ –¢–∞–º–æ—à–æ“≥–æ: {views}\n\n"
            
            # –ê–≥–∞—Ä –ø–∞—ë–º –∞–∑ “≥–∞–¥ –∑–∏—ë–¥ –¥–∞—Ä–æ–∑ —à–∞–≤–∞–¥, —Ä–∞–≤–æ–Ω –∫—É–Ω–∞–¥ –≤–∞ –∏–¥–æ–º–∞ –¥–∏“≥–∞–¥
            if len(message) > 3500:
                bot.send_message(msg.chat.id, message, parse_mode="Markdown")
                message = ""
        
        if message:
            bot.send_message(msg.chat.id, message, parse_mode="Markdown")
    else:
        bot.send_message(msg.chat.id, "‚ùå –Ø–≥–æ–Ω —Ñ–∏–ª–º –¥–∞—Ä –ø–æ–π–≥–æ“≥–∏ –¥–æ–¥–∞“≥–æ —ë—Ñ—Ç –Ω–∞—à—É–¥.")

# –ë–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω
@bot.message_handler(func=lambda msg: msg.text == "üîô –ë–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω")
def cancel_operation(msg):
    if msg.from_user.id == ADMIN_ID:
        if msg.chat.id in user_states:
            user_states.pop(msg.chat.id)
        panel(msg)
    else:
        start(msg)

# –ê–∑ –Ω–∞–≤ –±–æ—Ä–∫—É–Ω–∏–∏ –±–æ—Ç
@bot.message_handler(func=lambda msg: msg.text == "üîÑ –ë–æ—Ç-—Ä–æ –∞–∑ –Ω–∞–≤ —Å–∞—Ä –∫–∞—Ä–¥–∞–Ω" and msg.from_user.id == ADMIN_ID)
def restart_bot(msg):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚úÖ –¢–∞—Å–¥–∏“õ", "‚ùå –ë–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω")
    
    bot.send_message(
        msg.chat.id,
        "‚ö†Ô∏è –î–∏“õ“õ–∞—Ç! –ë–æ—Ç-—Ä–æ –∞–∑ –Ω–∞–≤ —Å–∞—Ä –∫–∞—Ä–¥–∞–Ω –º—É–º–∫–∏–Ω –∞—Å—Ç.\n\n"
        "–û—ë —à—É–º–æ –º–µ—Ö–æ“≥–µ–¥ –¥–∞–≤–æ–º –¥–∏“≥–µ–¥?",
        reply_markup=markup
    )
    
    user_states[msg.chat.id] = "confirm_restart"

@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id) == "confirm_restart" and msg.from_user.id == ADMIN_ID)
def confirm_restart(msg):
    if msg.text == "‚úÖ –¢–∞—Å–¥–∏“õ":
        bot.send_message(msg.chat.id, "üîÑ –ë–æ—Ç –∞–∑ –Ω–∞–≤ —Å–∞—Ä –∫–∞—Ä–¥–∞ –º–µ—à–∞–≤–∞–¥...")
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        save_db()
        # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        panel(msg)
    else:
        bot.send_message(msg.chat.id, "‚ùå –ê–º–∞–ª–∏—ë—Ç –±–µ–∫–æ—Ä –∫–∞—Ä–¥–∞ —à—É–¥.")
        panel(msg)
    
    user_states.pop(msg.chat.id)

# “ö–∞–±—É–ª–∏ —Ñ–∞–π–ª–∏ –≤–∏–¥–µ–æ –∞–∑ –∞–¥–º–∏–Ω
@bot.message_handler(content_types=["video"])
def save_movie(msg):
    if msg.from_user.id != ADMIN_ID:
        return
        
    if user_states.get(msg.chat.id) == "waiting_for_movie":
        # –î–æ—Ö–∏–ª –∫–∞—Ä–¥–∞–Ω–∏ –º–∞—ä–ª—É–º–æ—Ç –¥–∞—Ä –±–æ—Ä–∞–∏ —Ñ–∏–ª–º
        movie_id = str(random.randint(1000, 9999))
        
        # –¢–∞–≤–ª–∏–¥–∏ ID-–∏ –Ω–∞–≤ –∞–≥–∞—Ä ID-–∏ —Ñ–µ—ä–ª–∞ –º–∞–≤“∑—É–¥ –±–æ—à–∞–¥
        while movie_id in db["movies"]:
            movie_id = str(random.randint(1000, 9999))
        
        movie_info_temp[msg.chat.id] = {
            "id": movie_id,
            "file_id": msg.video.file_id,
            "file_size": msg.video.file_size,
            "duration": msg.video.duration,
            "width": msg.video.width,
            "height": msg.video.height
        }
        
        user_states[msg.chat.id] = "waiting_for_movie_title"
        
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üîô –ë–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω")
        
        bot.send_message(
            msg.chat.id, 
            "üìù –ù–æ–º–∏ —Ñ–∏–ª–º—Ä–æ –¥–æ—Ö–∏–ª –∫—É–Ω–µ–¥:",
            reply_markup=markup
        )

# “ö–∞–±—É–ª–∏ –Ω–æ–º–∏ —Ñ–∏–ª–º
@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id) == "waiting_for_movie_title")
def add_movie_title(msg):
    if msg.text == "üîô –ë–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω":
        if msg.chat.id in movie_info_temp:
            movie_info_temp.pop(msg.chat.id)
        user_states.pop(msg.chat.id)
        panel(msg)
        return
        
    movie_info_temp[msg.chat.id]["title"] = msg.text
    user_states[msg.chat.id] = "waiting_for_movie_info"
    
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("/skip")
    markup.add("üîô –ë–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω")
    
    bot.send_message(
        msg.chat.id, 
        "üìã –ú–∞—ä–ª—É–º–æ—Ç–∏ —Ñ–∏–ª–º—Ä–æ —Ä–∞–≤–æ–Ω –∫—É–Ω–µ–¥ —ë /skip –Ω–∞–≤–∏—Å–µ–¥:\n\n"
        "–ú–∏—Å–æ–ª: –ñ–∞–Ω—Ä, —Å–æ–ª, —Ä–µ–∂–∏—Å—Å—ë—Ä, –∞–∫—Ç—ë—Ä“≥–æ –≤–∞ “ì–∞–π—Ä–∞",
        reply_markup=markup
    )

# “ö–∞–±—É–ª–∏ –º–∞—ä–ª—É–º–æ—Ç –¥–∞—Ä –±–æ—Ä–∞–∏ —Ñ–∏–ª–º
@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id) == "waiting_for_movie_info")
def add_movie_info(msg):
    if msg.text == "üîô –ë–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω":
        if msg.chat.id in movie_info_temp:
            movie_info_temp.pop(msg.chat.id)
        user_states.pop(msg.chat.id)
        panel(msg)
        return
        
    if msg.text == "/skip":
        movie_info_temp[msg.chat.id]["info"] = "–ú–∞—ä–ª—É–º–æ—Ç –¥–∞—Å—Ç—Ä–∞—Å –Ω–µ—Å—Ç"
    else:
        movie_info_temp[msg.chat.id]["info"] = msg.text
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –≤ –ë–î
    movie_id = movie_info_temp[msg.chat.id]["id"]
    db["movies"][movie_id] = {
        "title": movie_info_temp[msg.chat.id]["title"],
        "info": movie_info_temp[msg.chat.id]["info"],
        "file_id": movie_info_temp[msg.chat.id]["file_id"],
        "file_size": movie_info_temp[msg.chat.id]["file_size"],
        "duration": movie_info_temp[msg.chat.id]["duration"],
        "width": movie_info_temp[msg.chat.id]["width"],
        "height": movie_info_temp[msg.chat.id]["height"],
        "views": 0,
        "added_date": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    save_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    invite_link = f"https://t.me/{bot.get_me().username}?start={movie_id}"
    
    bot.send_message(
        msg.chat.id, 
        f"‚úÖ –§–∏–ª–º –±–æ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –∏–ª–æ–≤–∞ –∫–∞—Ä–¥–∞ —à—É–¥!\n\n"
        f"üé¨ *{movie_info_temp[msg.chat.id]['title']}*\n"
        f"üîë ID: `{movie_id}`\n\n"
        f"üîó –ü–∞–π–≤–∞–Ω–¥ –±–∞—Ä–æ–∏ –¥–∞—Å—Ç—Ä–∞—Å”£:\n`{invite_link}`",
        parse_mode="Markdown"
    )
    
    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    movie_info_temp.pop(msg.chat.id)
    user_states.pop(msg.chat.id)
    
    # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    panel(msg)

# “ö–∞–±—É–ª–∏ –Ω–æ–º–∏ –∫–∞–Ω–∞–ª
@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id) == "waiting_for_channel")
def add_channel_handler(msg):
    if msg.text == "üîô –ë–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω":
        user_states.pop(msg.chat.id)
        panel(msg)
        return
        
    channel = msg.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    if not (channel.startswith("@") or channel.startswith("-100")):
        bot.send_message(
            msg.chat.id, 
            "‚ùå –§–æ—Ä–º–∞—Ç–∏ –Ω–æ–º–∏ –∫–∞–Ω–∞–ª –Ω–æ–¥—É—Ä—É—Å—Ç –∞—Å—Ç. –ù–∞–º—É–Ω–∞: @channel —ë -100123456789"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    if channel in db["channels"]:
        bot.send_message(
            msg.chat.id, 
            "‚ùå –ò–Ω –∫–∞–Ω–∞–ª –∞–ª–ª–∞–∫–∞–π –¥–∞—Ä —Ä”Ø–π—Ö–∞—Ç –º–∞–≤“∑—É–¥ –∞—Å—Ç!"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É
    try:
        chat_info = bot.get_chat(channel)
        bot_member = bot.get_chat_member(channel, bot.get_me().id)
        
        if bot_member.status not in ['administrator']:
            bot.send_message(
                msg.chat.id, 
                "‚ùå –ë–æ—Ç –±–æ—è–¥ –¥–∞—Ä –∫–∞–Ω–∞–ª–∏ –∑–∏–∫—Ä—à—É–¥–∞ –∞–¥–º–∏–Ω –±–æ—à–∞–¥!"
            )
            return
            
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –≤ –ë–î
        db["channels"].append(channel)
        save_db()
        
        bot.send_message(
            msg.chat.id, 
            f"‚úÖ –ö–∞–Ω–∞–ª \"{chat_info.title}\" ({channel}) –±–æ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –∏–ª–æ–≤–∞ –∫–∞—Ä–¥–∞ —à—É–¥!"
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        panel(msg)
        
    except Exception as e:
        bot.send_message(
            msg.chat.id, 
            f"‚ùå –•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ —Ç–∞—Ñ—Ç–∏—à–∏ –∫–∞–Ω–∞–ª: {e}\n\n"
            "–®—É–º–æ –±–æ—è–¥ –∞–≤–≤–∞–ª –±–æ—Ç—Ä–æ –±–∞ –∫–∞–Ω–∞–ª “≥–∞–º—á—É–Ω –∞–¥–º–∏–Ω –∏–ª–æ–≤–∞ –∫—É–Ω–µ–¥."
        )
        
    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_states.pop(msg.chat.id)

# “∂—É—Å—Ç—É“∑”Ø–∏ —Ñ–∏–ª–º
@bot.message_handler(func=lambda msg: msg.text == "üîé “∂—É—Å—Ç—É“∑”Ø–∏ —Ñ–∏–ª–º")
def search_movie(msg):
    if not is_subscribed(msg.chat.id):
        start(msg)  # Redirect to subscription check
        return
        
    user_states[msg.chat.id] = "waiting_for_search_query"
    
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üîô –ë–æ–∑–≥–∞—à—Ç –±–∞ –º–µ–Ω—é")
    
    bot.send_message(
        msg.chat.id, 
        "üîé –ù–æ–º–∏ —Ñ–∏–ª–º—Ä–æ –±–∞—Ä–æ–∏ “∑—É—Å—Ç—É“∑”Ø –¥–æ—Ö–∏–ª –∫—É–Ω–µ–¥:",
        reply_markup=markup
    )

# –§–∏–ª–º“≥–æ–∏ –Ω–∞–≤
@bot.message_handler(func=lambda msg: msg.text == "üé¨ –§–∏–ª–º“≥–æ–∏ –Ω–∞–≤")
def new_movies(msg):
    if not is_subscribed(msg.chat.id):
        start(msg)  # Redirect to subscription check
        return
    
    if not db["movies"]:
        bot.send_message(msg.chat.id, "‚ùå –î–∞—Ä –∞–π–Ω–∏ “≥–æ–ª —Ñ–∏–ª–º“≥–æ –º–∞–≤“∑—É–¥ –Ω–µ—Å—Ç–∞–Ω–¥.")
        return
        
    # –ì–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ —Ñ–∏–ª–º“≥–æ–∏ –æ—Ö–∏—Ä–∏–Ω (—Ç–æ 10-—Ç–æ)
    movies = sorted(
        db["movies"].items(),
        key=lambda x: datetime.strptime(x[1].get("added_date", "2000-01-01 00:00:00"), "%Y-%m-%d %H:%M:%S"),
        reverse=True
    )[:10]
    
    if not movies:
        bot.send_message(msg.chat.id, "‚ùå –î–∞—Ä –∞–π–Ω–∏ “≥–æ–ª —Ñ–∏–ª–º“≥–æ –º–∞–≤“∑—É–¥ –Ω–µ—Å—Ç–∞–Ω–¥.")
        return
        
    markup = telebot.types.InlineKeyboardMarkup()
    
    for movie_id, movie_data in movies:
        title = movie_data.get("title", "–ë–µ –Ω–æ–º")
        markup.add(telebot.types.InlineKeyboardButton(
            f"üé¨ {title}", 
            callback_data=f"watch_{movie_id}"
        ))
    
    bot.send_message(
        msg.chat.id, 
        "üé¨ –§–∏–ª–º“≥–æ–∏ –Ω–∞–≤ –¥–∞—Ä –±–æ—Ç:",
        reply_markup=markup
    )

# –û–º–æ—Ä–∏ –º–∞–Ω
@bot.message_handler(func=lambda msg: msg.text == "üìä –û–º–æ—Ä–∏ –º–∞–Ω")
def user_stats(msg):
    if not is_subscribed(msg.chat.id):
        start(msg)  # Redirect to subscription check
        return
        
    user_id = str(msg.chat.id)
    
    if user_id in db["users"]:
        user_data = db["users"][user_id]
        movies_watched = user_data.get("movies_watched", 0)
        join_date = datetime.strptime(user_data.get("joined_date", "2000-01-01 00:00:00"), "%Y-%m-%d %H:%M:%S")
        days_since_join = (datetime.now() - join_date).days
        
        bot.send_message(
            msg.chat.id,
            f"üìä *–û–º–æ—Ä–∏ —à—É–º–æ:*\n\n"
            f"üë§ *ID-–∏ —à—É–º–æ:* `{user_id}`\n"
            f"üìÖ *–°–∞–Ω–∞–∏ –ø–∞–π–≤–∞—Å—Ç—à–∞–≤”£:* {join_date.strftime('%Y-%m-%d')}\n"
            f"‚è± *–†”Ø–∑“≥–æ –¥–∞—Ä –±–æ—Ç:* {days_since_join}\n"
            f"üé¨ *–§–∏–ª–º“≥–æ–∏ —Ç–∞–º–æ—à–æ–∫–∞—Ä–¥–∞:* {movies_watched}",
            parse_mode="Markdown"
        )
    else:
        bot.send_message(
            msg.chat.id,
            "‚ùå –ú–∞—ä–ª—É–º–æ—Ç –¥–∞—Ä –±–æ—Ä–∞–∏ —à—É–º–æ —ë—Ñ—Ç –Ω–∞—à—É–¥!"
        )

# –î–∞—Å—Ç—É—Ä–∞–º–∞–ª
@bot.message_handler(func=lambda msg: msg.text == "‚ÑπÔ∏è –î–∞—Å—Ç—É—Ä–∞–º–∞–ª")
def instructions(msg):
    if not is_subscribed(msg.chat.id):
        start(msg)  # Redirect to subscription check
        return
        
    bot.send_message(
        msg.chat.id,
        "‚ÑπÔ∏è *–î–∞—Å—Ç—É—Ä–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –±–æ—Ç:*\n\n"
        "1Ô∏è‚É£ –ë–∞—Ä–æ–∏ —Ç–∞–º–æ—à–æ–∏ —Ñ–∏–ª–º –º–µ—Ç–∞–≤–æ–Ω–µ–¥ –∞–∑ —Ç—É–≥–º–∞–∏ ¬´üé¨ –§–∏–ª–º“≥–æ–∏ –Ω–∞–≤¬ª –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥.\n\n"
        "2Ô∏è‚É£ –ë–∞—Ä–æ–∏ “∑—É—Å—Ç—É“∑”Ø–∏ —Ñ–∏–ª–º –∞–∑ —Ç—É–≥–º–∞–∏ ¬´üîé “∂—É—Å—Ç—É“∑”Ø–∏ —Ñ–∏–ª–º¬ª –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥.\n\n"
        "3Ô∏è‚É£ –ê–≥–∞—Ä ID-–∏ —Ñ–∏–ª–º—Ä–æ –º–µ–¥–æ–Ω–µ–¥, –æ–Ω—Ä–æ “≥–∞–º—á—É–Ω –º–∞—Ç–Ω —Ä–∞–≤–æ–Ω –∫—É–Ω–µ–¥.\n\n"
        "4Ô∏è‚É£ –ë–∞—Ä–æ–∏ –¥–∏–¥–∞–Ω–∏ –æ–º–æ—Ä–∏ —Ö—É–¥ –∞–∑ —Ç—É–≥–º–∞–∏ ¬´üìä –û–º–æ—Ä–∏ –º–∞–Ω¬ª –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥.\n\n"
        "üîó “≤–∞—Ä —è–∫ —Ñ–∏–ª–º –¥–æ—Ä–æ–∏ –ø–∞–π–≤–∞–Ω–¥–∏ –º–∞—Ö—Å—É—Å –∞—Å—Ç, –∫–∏ –æ–Ω—Ä–æ –º–µ—Ç–∞–≤–æ–Ω–µ–¥ –±–∞ –¥”Ø—Å—Ç–æ–Ω —Ä–∞–≤–æ–Ω –∫—É–Ω–µ–¥.",
        parse_mode="Markdown"
    )

# “∂—É—Å—Ç—É“∑”Ø–∏ —Ñ–∏–ª–º –∞–∑ —Ä”Ø–∏ –Ω–æ–º–∞—à
@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id) == "waiting_for_search_query")
def process_search(msg):
    if msg.text == "üîô –ë–æ–∑–≥–∞—à—Ç –±–∞ –º–µ–Ω—é":
        user_states.pop(msg.chat.id)
        start(msg)
        return
        
    query = msg.text.lower()
    
    # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∏–ª—å–º–∞
    results = []
    for movie_id, movie_data in db["movies"].items():
        title = movie_data.get("title", "").lower()
        if query in title:
            results.append((movie_id, movie_data))
    
    if not results:
        bot.send_message(
            msg.chat.id,
            "‚ùå –ê–∑ —Ä”Ø–∏ –¥–∞—Ä—Ö–æ—Å—Ç–∏ —à—É–º–æ —è–≥–æ–Ω —Ñ–∏–ª–º —ë—Ñ—Ç –Ω–∞—à—É–¥.\n\n"
            "–õ—É—Ç—Ñ–∞–Ω, –¥–∞—Ä—Ö–æ—Å—Ç–∏ –¥–∏–≥–∞—Ä—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ —ë –±–∞ –º–µ–Ω—é –±–∞—Ä–≥–∞—Ä–¥–µ–¥:"
        )
        return
        
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    markup = telebot.types.InlineKeyboardMarkup()
    
    for movie_id, movie_data in results:
        title = movie_data.get("title", "–ë–µ –Ω–æ–º")
        markup.add(telebot.types.InlineKeyboardButton(
            f"üé¨ {title}", 
            callback_data=f"watch_{movie_id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    markup.add(telebot.types.InlineKeyboardButton("üîô –ë–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω", callback_data="cancel_search"))
    
    bot.send_message(
        msg.chat.id, 
        f"üîé –ù–∞—Ç–∏“∑–∞“≥–æ–∏ “∑—É—Å—Ç—É“∑”Ø –∞–∑ —Ä”Ø–∏ –¥–∞—Ä—Ö–æ—Å—Ç–∏ \"{msg.text}\":",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å–º–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("watch_"))
def watch_movie(call):
    movie_id = call.data.split("_")[1]
    
    if is_subscribed(call.message.chat.id):
        if movie_id in db["movies"]:
            # –§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ —Ñ–∏–ª–º
            send_movie_to_user(call.message.chat.id, movie_id)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except:
                pass
        else:
            bot.answer_callback_query(call.id, "‚ùå –ë–∞—Ö—à–∏—à, —Ñ–∏–ª–º —ë—Ñ—Ç –Ω–∞—à—É–¥.", show_alert=True)
    else:
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
        start_msg = telebot.types.Message(
            message_id=call.message.message_id,
            from_user=call.from_user,
            date=call.message.date,
            chat=call.message.chat,
            content_type='text',
            options={},
            json_string=''
        )
        start_msg.text = f"/start {movie_id}"
        start(start_msg)

# –û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞
@bot.callback_query_handler(func=lambda call: call.data == "cancel_search")
def cancel_search(call):
    user_states.pop(call.message.chat.id, None)
    
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except:
        pass
        
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üé¨ –§–∏–ª–º“≥–æ–∏ –Ω–∞–≤", "üîé “∂—É—Å—Ç—É“∑”Ø–∏ —Ñ–∏–ª–º")
    markup.add("üìä –û–º–æ—Ä–∏ –º–∞–Ω", "‚ÑπÔ∏è –î–∞—Å—Ç—É—Ä–∞–º–∞–ª")
    
    bot.send_message(
        call.message.chat.id,
        "üîô –ë–∞ –º–µ–Ω—é –±–∞—Ä–≥–∞—à—Ç–µ–º.",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (ID —Ñ–∏–ª—å–º–∞)
@bot.message_handler(func=lambda msg: msg.text and msg.text.isdigit() and len(msg.text) == 4)
def get_movie_by_id(msg):
    movie_id = msg.text
    
    if is_subscribed(msg.chat.id):
        if movie_id in db["movies"]:
            send_movie_to_user(msg.chat.id, movie_id)
        else:
            bot.send_message(
                msg.chat.id,
                "‚ùå –§–∏–ª–º –±–æ —á—É–Ω–∏–Ω ID —ë—Ñ—Ç –Ω–∞—à—É–¥.\n\n"
                "–õ—É—Ç—Ñ–∞–Ω, ID-—Ä–æ —Å–∞–Ω“∑–∏–¥–∞, —Ç–∞–∫—Ä–æ—Ä–∞–Ω –∫”Ø—à–∏—à –∫—É–Ω–µ–¥."
            )
    else:
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
        start_msg = telebot.types.Message(
            message_id=msg.message_id,
            from_user=msg.from_user,
            date=msg.date,
            chat=msg.chat,
            content_type='text',
            options={},
            json_string=''
        )
        start_msg.text = f"/start {movie_id}"
        start(start_msg)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda msg: True)
def handle_message(msg):
    if msg.text.startswith('/'):
        bot.send_message(msg.chat.id, "‚ùå –î–∞—Å—Ç—É—Ä –≤—É“∑—É–¥ –Ω–∞–¥–æ—Ä–∞–¥.")
    else:
        if is_subscribed(msg.chat.id):
            markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("üé¨ –§–∏–ª–º“≥–æ–∏ –Ω–∞–≤", "üîé “∂—É—Å—Ç—É“∑”Ø–∏ —Ñ–∏–ª–º")
            markup.add("üìä –û–º–æ—Ä–∏ –º–∞–Ω", "‚ÑπÔ∏è –î–∞—Å—Ç—É—Ä–∞–º–∞–ª")
            
            bot.send_message(
                msg.chat.id,
                "‚ùì –ê–∑ –º–µ–Ω—é –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥ —ë ID-–∏ —Ñ–∏–ª–º—Ä–æ –±–∏–Ω–∞–≤–∏—Å–µ–¥:",
                reply_markup=markup
            )
        else:
            start(msg)
           # Webhook-—Ä–æ –Ω–∞—Å–± –º–µ–∫—É–Ω–µ–º
bot.remove_webhook()
bot.set_webhook(url=f"https://main-bot-7ydv.onrender.com/7105177180:AAGvw_qqid-VIVMwGMZIbo3L6cZCYQgj2DY")

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
